HomeWork:


    Reading:


            1. Herbert Schildt - https://drive.google.com/open?id=1os57g3BfMhqafFECVbodOoDZ6SKftQWB

               Часть 1. Язык Java Глава
                    1. Глава 6. Введение в классы - 155 - 177
                    2. Глава 7. Подробное рассмотрение классов и методов - 177 - 207

            2. CayS. Horstmann - https://drive.google.com/open?id=1jBC-OY-dvRcSeaK9Tttc7kvF12-zuK_j

                1. Глава 4. Объекты и классы - 131 -194

    Writing:
                     1.1 Create class with name Student. Student should have following state and behaviour:
                         Three private fields name of type String, age of type int birthDate of type java.util.Date
                         One constructor with all fields
                         getter and setter methods for all fields
                         Override toString method
                         Think and implement a way how to calculate haw many objects of type Student were created(should be used static field).

                     1.2 Create class TestStudent.
                         In main method create three objects of type Student.
                         Print how many objects were created of type Student.


                     2.1 Create class MyMath make all methods static
                         Create static final class variable(static field) = 3.14
                         Create method min(int [] arr) which takes array of type int and returns minimum element of the array.
                         Create method min(double [] arr) which takes array of type double and returns minimum element of the array.
                         Create method max(int [] arr) which takes array of type int and returns maximum element of the array.
                         Create method max(double [] arr) which takes array of type double and returns maximum element of the array.
                         Create method sum(int [] arr) which takes array of int and returns sum of array elements.
                         Create method sum(double [] arr) which takes array of double and returns sum of array elements.
                         Create method mull(int [] arr) which takes array of int and returns multiplication of array elements.
                         Create method mull(double [] arr) which takes array of double and returns multiplication of array elements.
                         Create method isPrime(int number) which returns if the number is prime or not.
                         Create method pow(int m, int n) which returns m pow n(m-ի n աստիճանը).

                     2.2 Create class TestMyMath.
                         Inside main method calculate min max sum and mulltiplication of following arrays:
                         int [] intArray  = {1,2,8,3,6,5,4,7,8,9}
                         double [] doubleArray  = {1.5,2.9,8.9,3.1,6.2,5.8,4.7,7.0,8.78,9.01}
                         Calcualate 3 pow 7
                         Check weather the 1489775697 is prime or not.

                     3.1 Create abstract class Person:
                         The class should have name of type String, address of type String
                         Initialize the fields with default values John, Armenia,Yerevan respectively inside non static initialization block.
                         One constructor with name and address parameters
                         Create getter and setter methods for all fields
                         Override toString() method.

                         Create class Student which should have all properties of Person class plus Student has university of type String, fee of type double
                         Create constructor with name, address, university and fee parameters
                         Create getter and setter methods for all fields
                         Override toString() method which returns all information for Student object

                         Create class Employee which should have all properties of Person class plus Employee has office of type String, salary of type double
                         Create constructor with name, address, office and salary parameters
                         Create getter and setter methods for all fields
                         Override toString() method which returns all information for Employee object

                     3.1 Create class TestPersonSubClasses inside main method create objects of type Student and Employee
                         Print this objects on console


                     4.1 Create class Shape which contains:
                         Two instance variables color (String) and filled (boolean).
                         Two constructors: a no-arg (no-argument) constructor that initializes the color to "green" and filled to true, and a constructor that initializes the color and filled to the given values.
                         Getter and setter for all the instance variables.
                         A toString() method that returns "A Shape with color of xxx and filled/Not filled".

                     4.2 Create subclass of Shape with name Circle which contains:
                         An instance variable radius (double).
                         Three constructors as shown. The no-arg constructor initializes the radius to 1.0.
                         Getter and setter for the instance variable radius.
                         Methods getArea() and getPerimeter().
                         Override the toString() method inherited, to return "A Circle with radius=xxx, which is a subclass of yyy", where yyy is the output of the toString() method from the superclass.

                      4.3 Create subclass of Shape with name Rectangle which contains:
                          wo instance variables width (double) and length (double).
                          Three constructors as shown. The no-arg constructor initializes the width and length to 1.0.
                          Getter and setter for all the instance variables.
                          Methods getArea() and getPerimeter().
                          Override the toString() method inherited, to return "A Rectangle with width=xxx and length=zzz, which is a subclass of yyy", where yyy is the output of the toString() method from the superclass.

                      4.4 Create class Square which is a sub class of Rectangle
                          Square has no instance variable, but inherits the instance variables width and length from its superclass Rectangle.
                          Provide the appropriate constructors (as shown in the class diagram). Hint:

                          public Square(double side) {
                             super(side, side);  // Call superclass Rectangle(double, double)
                          }
                        Override the toString() method to return "A Square with side=xxx, which is a subclass of yyy", where yyy is the output of the toString() method from the superclass.
                        Do you need to override the getArea() and getPerimeter()? Try them out.
                        Override the setLength() and setWidth() to change both the width and length, so as to maintain the square geometry.


                       5.1 Create abstract class Animal which has one private field nam of type String and abstract method greeting();
                           Create one constructor with name parameter
                           Create subclass of Animal with name Cat
                           Create subclass of Animal with name Dog
                           Crete subclass of Dog with name Akita
                           Override grreting() method in all subclasses

                       5.2 Create class with name TestAnimal
                            Create array of animal like Animal [] animals = {new Cat("C1"),new Dog("D1"),new Akita("A1"),new Cat("C2"),new Dog("D2"),new Akita("A2")}
                            Iterate over array and call the greeting method for each object.




                       6.1 Write an abstract class Shape with the following properties:
                            An instance variable shapeName of type String
                            An abstract method area()
                            A toString method that returns the name of the shape

                       6.2 Create subclass of Shape with name Circle with the following properties
                           private field radius of type double
                           Constructor with all parameters
                           Override area() method for Circle

                       6.3 Create subclass of Shape with name Cylinder with the following properties.
                           private field radius of type double
                           private field height of type double
                           Constructor with all parameters
                           override area method(the area of cylinder = PI * height * radius^2)

                        6.4 Create subclass of Shape with name Rectangle with the following properties.
                            private field width of type double
                            private field height of type double
                            Constructor with all parameters
                            override area() method

                        6.5 Create class Painter which have following behaviour:
                            static paint(Shape shape, String color) which prints on the console the shape name area and the color in this format [Painted shape with name: ? with color: ?, with area: ? ]
                            static paint(Shape [] shapes, String color) method which prints all shapes in above described format

                        6.6 Create class TestPainter. In main method create Array of shapes and paint all shapes with Painter class.








